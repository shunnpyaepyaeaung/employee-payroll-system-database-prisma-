
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
export import PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: 2.14.0
 * Query Engine version: 5d491261d382a2a5ffdc71de17072b0e409f1cc1
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Buffer
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

export type Union = any

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

/**
A [[Boolean]]
*/
export type Boolean = True | False

// /**
// 1
// */
export type True = 1

/**
0
*/
export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never



/**
 * Used by group by
 */

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
> = IsObject<T> extends True ? U : T

type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but with an array
 */
type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>





/**
 * Model Employee
 */

export type Employee = {
  id: number
  employeename: string
  address: string
  agreesalary: number
}

/**
 * Model MonthlySalary
 */

export type MonthlySalary = {
  id: number
  actualsalary: number
  e_Id: number
}

/**
 * Model Paid
 */

export type Paid = {
  id: number
  paidmonth: string
  payout: number
  e_id: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Employees
 * const employees = await prisma.employee.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Employees
   * const employees = await prisma.employee.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate;

  /**
   * `prisma.monthlySalary`: Exposes CRUD operations for the **MonthlySalary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MonthlySalaries
    * const monthlySalaries = await prisma.monthlySalary.findMany()
    * ```
    */
  get monthlySalary(): Prisma.MonthlySalaryDelegate;

  /**
   * `prisma.paid`: Exposes CRUD operations for the **Paid** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Paids
    * const paids = await prisma.paid.findMany()
    * ```
    */
  get paid(): Prisma.PaidDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.14.0
   * Query Engine version: 5d491261d382a2a5ffdc71de17072b0e409f1cc1
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Employee: 'Employee',
    MonthlySalary: 'MonthlySalary',
    Paid: 'Paid'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model Employee
   */


  export type AggregateEmployee = {
    count: number | null
    avg: EmployeeAvgAggregateOutputType | null
    sum: EmployeeSumAggregateOutputType | null
    min: EmployeeMinAggregateOutputType | null
    max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    id: number
    agreesalary: number
  }

  export type EmployeeSumAggregateOutputType = {
    id: number
    agreesalary: number
  }

  export type EmployeeMinAggregateOutputType = {
    id: number
    employeename: string | null
    address: string | null
    agreesalary: number
  }

  export type EmployeeMaxAggregateOutputType = {
    id: number
    employeename: string | null
    address: string | null
    agreesalary: number
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    employeename: number | null
    address: number | null
    agreesalary: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    id?: true
    agreesalary?: true
  }

  export type EmployeeSumAggregateInputType = {
    id?: true
    agreesalary?: true
  }

  export type EmployeeMinAggregateInputType = {
    id?: true
    employeename?: true
    address?: true
    agreesalary?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    employeename?: true
    address?: true
    agreesalary?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    employeename?: true
    address?: true
    agreesalary?: true
    _all?: true
  }

  export type AggregateEmployeeArgs = {
    /**
     * Filter which Employee to aggregate.
    **/
    where?: EmployeeWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Employees to fetch.
    **/
    orderBy?: Enumerable<EmployeeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends AggregateEmployeeArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetEmployeeAggregateScalarType<T[P]>
  }

  export type GetEmployeeAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof EmployeeAvgAggregateOutputType ? EmployeeAvgAggregateOutputType[P] : never
  }

    



  export type EmployeeSelect = {
    id?: boolean
    employeename?: boolean
    address?: boolean
    agreesalary?: boolean
    MonthlySalary?: boolean | MonthlySalaryArgs
    Paid?: boolean | PaidArgs
  }

  export type EmployeeInclude = {
    MonthlySalary?: boolean | MonthlySalaryArgs
    Paid?: boolean | PaidArgs
  }

  export type EmployeeGetPayload<
    S extends boolean | null | undefined | EmployeeArgs,
    U = keyof S
      > = S extends true
        ? Employee
    : S extends undefined
    ? never
    : S extends EmployeeArgs | FindManyEmployeeArgs
    ?'include' extends U
    ? Employee  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'MonthlySalary'
        ? MonthlySalaryGetPayload<S['include'][P]> | null :
        P extends 'Paid'
        ? PaidGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Employee ?Employee [P]
  : 
          P extends 'MonthlySalary'
        ? MonthlySalaryGetPayload<S['select'][P]> | null :
        P extends 'Paid'
        ? PaidGetPayload<S['select'][P]> | null : never
  } 
    : Employee
  : Employee


  export interface EmployeeDelegate {
    /**
     * Find zero or one Employee that matches the filter.
     * @param {FindUniqueEmployeeArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueEmployeeArgs>(
      args: Subset<T, FindUniqueEmployeeArgs>
    ): CheckSelect<T, Prisma__EmployeeClient<Employee | null>, Prisma__EmployeeClient<EmployeeGetPayload<T> | null>>

    /**
     * Find the first Employee that matches the filter.
     * @param {FindFirstEmployeeArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstEmployeeArgs>(
      args?: Subset<T, FindFirstEmployeeArgs>
    ): CheckSelect<T, Prisma__EmployeeClient<Employee | null>, Prisma__EmployeeClient<EmployeeGetPayload<T> | null>>

    /**
     * Find zero or more Employees that matches the filter.
     * @param {FindManyEmployeeArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyEmployeeArgs>(
      args?: Subset<T, FindManyEmployeeArgs>
    ): CheckSelect<T, Promise<Array<Employee>>, Promise<Array<EmployeeGetPayload<T>>>>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
    **/
    create<T extends EmployeeCreateArgs>(
      args: Subset<T, EmployeeCreateArgs>
    ): CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
    **/
    delete<T extends EmployeeDeleteArgs>(
      args: Subset<T, EmployeeDeleteArgs>
    ): CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmployeeUpdateArgs>(
      args: Subset<T, EmployeeUpdateArgs>
    ): CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmployeeDeleteManyArgs>(
      args?: Subset<T, EmployeeDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Employees.
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmployeeUpdateManyArgs>(
      args: Subset<T, EmployeeUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
    **/
    upsert<T extends EmployeeUpsertArgs>(
      args: Subset<T, EmployeeUpsertArgs>
    ): CheckSelect<T, Prisma__EmployeeClient<Employee>, Prisma__EmployeeClient<EmployeeGetPayload<T>>>

    /**
     * Find zero or one Employee that matches the filter.
     * @param {FindUniqueEmployeeArgs} args - Arguments to find a Employee
     * @deprecated This will be deprecated please use prisma.employee.findUnique
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueEmployeeArgs>(
      args: Subset<T, FindUniqueEmployeeArgs>
    ): CheckSelect<T, Prisma__EmployeeClient<Employee | null>, Prisma__EmployeeClient<EmployeeGetPayload<T> | null>>

    /**
     * Count the number of Employees.
     * @param {FindManyEmployeeArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyEmployeeArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Employee.
     * @param {AggregateEmployeeArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateEmployeeArgs>(args: Subset<T, AggregateEmployeeArgs>): Promise<GetEmployeeAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EmployeeClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    MonthlySalary<T extends MonthlySalaryArgs = {}>(args?: Subset<T, MonthlySalaryArgs>): CheckSelect<T, Prisma__MonthlySalaryClient<MonthlySalary | null>, Prisma__MonthlySalaryClient<MonthlySalaryGetPayload<T> | null>>;

    Paid<T extends PaidArgs = {}>(args?: Subset<T, PaidArgs>): CheckSelect<T, Prisma__PaidClient<Paid | null>, Prisma__PaidClient<PaidGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Employee findUnique
   */
  export type FindUniqueEmployeeArgs = {
    /**
     * Select specific fields to fetch from the Employee
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: EmployeeInclude | null
    /**
     * Filter, which Employee to fetch.
    **/
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee findFirst
   */
  export type FindFirstEmployeeArgs = {
    /**
     * Select specific fields to fetch from the Employee
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: EmployeeInclude | null
    /**
     * Filter, which Employee to fetch.
    **/
    where?: EmployeeWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Employees to fetch.
    **/
    orderBy?: Enumerable<EmployeeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
    **/
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Employees.
    **/
    distinct?: Enumerable<EmployeeScalarFieldEnum>
  }


  /**
   * Employee findMany
   */
  export type FindManyEmployeeArgs = {
    /**
     * Select specific fields to fetch from the Employee
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: EmployeeInclude | null
    /**
     * Filter, which Employees to fetch.
    **/
    where?: EmployeeWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Employees to fetch.
    **/
    orderBy?: Enumerable<EmployeeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
    **/
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
    **/
    skip?: number
    distinct?: Enumerable<EmployeeScalarFieldEnum>
  }


  /**
   * Employee create
   */
  export type EmployeeCreateArgs = {
    /**
     * Select specific fields to fetch from the Employee
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: EmployeeInclude | null
    /**
     * The data needed to create a Employee.
    **/
    data: EmployeeCreateInput
  }


  /**
   * Employee update
   */
  export type EmployeeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Employee
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: EmployeeInclude | null
    /**
     * The data needed to update a Employee.
    **/
    data: EmployeeUpdateInput
    /**
     * Choose, which Employee to update.
    **/
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs = {
    data: EmployeeUpdateManyMutationInput
    where?: EmployeeWhereInput
  }


  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Employee
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: EmployeeInclude | null
    /**
     * The filter to search for the Employee to update in case it exists.
    **/
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
    **/
    create: EmployeeCreateInput
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
    **/
    update: EmployeeUpdateInput
  }


  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Employee
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: EmployeeInclude | null
    /**
     * Filter which Employee to delete.
    **/
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs = {
    where?: EmployeeWhereInput
  }


  /**
   * Employee without action
   */
  export type EmployeeArgs = {
    /**
     * Select specific fields to fetch from the Employee
    **/
    select?: EmployeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: EmployeeInclude | null
  }



  /**
   * Model MonthlySalary
   */


  export type AggregateMonthlySalary = {
    count: number | null
    avg: MonthlySalaryAvgAggregateOutputType | null
    sum: MonthlySalarySumAggregateOutputType | null
    min: MonthlySalaryMinAggregateOutputType | null
    max: MonthlySalaryMaxAggregateOutputType | null
  }

  export type MonthlySalaryAvgAggregateOutputType = {
    id: number
    actualsalary: number
    e_Id: number
  }

  export type MonthlySalarySumAggregateOutputType = {
    id: number
    actualsalary: number
    e_Id: number
  }

  export type MonthlySalaryMinAggregateOutputType = {
    id: number
    actualsalary: number
    e_Id: number
  }

  export type MonthlySalaryMaxAggregateOutputType = {
    id: number
    actualsalary: number
    e_Id: number
  }

  export type MonthlySalaryCountAggregateOutputType = {
    id: number
    actualsalary: number
    e_Id: number
    _all: number
  }


  export type MonthlySalaryAvgAggregateInputType = {
    id?: true
    actualsalary?: true
    e_Id?: true
  }

  export type MonthlySalarySumAggregateInputType = {
    id?: true
    actualsalary?: true
    e_Id?: true
  }

  export type MonthlySalaryMinAggregateInputType = {
    id?: true
    actualsalary?: true
    e_Id?: true
  }

  export type MonthlySalaryMaxAggregateInputType = {
    id?: true
    actualsalary?: true
    e_Id?: true
  }

  export type MonthlySalaryCountAggregateInputType = {
    id?: true
    actualsalary?: true
    e_Id?: true
    _all?: true
  }

  export type AggregateMonthlySalaryArgs = {
    /**
     * Filter which MonthlySalary to aggregate.
    **/
    where?: MonthlySalaryWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of MonthlySalaries to fetch.
    **/
    orderBy?: Enumerable<MonthlySalaryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: MonthlySalaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonthlySalaries from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonthlySalaries.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MonthlySalaries
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: MonthlySalaryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: MonthlySalarySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: MonthlySalaryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: MonthlySalaryMaxAggregateInputType
  }

  export type GetMonthlySalaryAggregateType<T extends AggregateMonthlySalaryArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetMonthlySalaryAggregateScalarType<T[P]>
  }

  export type GetMonthlySalaryAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof MonthlySalaryAvgAggregateOutputType ? MonthlySalaryAvgAggregateOutputType[P] : never
  }

    



  export type MonthlySalarySelect = {
    id?: boolean
    actualsalary?: boolean
    employeeTable?: boolean | EmployeeArgs
    e_Id?: boolean
  }

  export type MonthlySalaryInclude = {
    employeeTable?: boolean | EmployeeArgs
  }

  export type MonthlySalaryGetPayload<
    S extends boolean | null | undefined | MonthlySalaryArgs,
    U = keyof S
      > = S extends true
        ? MonthlySalary
    : S extends undefined
    ? never
    : S extends MonthlySalaryArgs | FindManyMonthlySalaryArgs
    ?'include' extends U
    ? MonthlySalary  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'employeeTable'
        ? EmployeeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof MonthlySalary ?MonthlySalary [P]
  : 
          P extends 'employeeTable'
        ? EmployeeGetPayload<S['select'][P]> : never
  } 
    : MonthlySalary
  : MonthlySalary


  export interface MonthlySalaryDelegate {
    /**
     * Find zero or one MonthlySalary that matches the filter.
     * @param {FindUniqueMonthlySalaryArgs} args - Arguments to find a MonthlySalary
     * @example
     * // Get one MonthlySalary
     * const monthlySalary = await prisma.monthlySalary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueMonthlySalaryArgs>(
      args: Subset<T, FindUniqueMonthlySalaryArgs>
    ): CheckSelect<T, Prisma__MonthlySalaryClient<MonthlySalary | null>, Prisma__MonthlySalaryClient<MonthlySalaryGetPayload<T> | null>>

    /**
     * Find the first MonthlySalary that matches the filter.
     * @param {FindFirstMonthlySalaryArgs} args - Arguments to find a MonthlySalary
     * @example
     * // Get one MonthlySalary
     * const monthlySalary = await prisma.monthlySalary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstMonthlySalaryArgs>(
      args?: Subset<T, FindFirstMonthlySalaryArgs>
    ): CheckSelect<T, Prisma__MonthlySalaryClient<MonthlySalary | null>, Prisma__MonthlySalaryClient<MonthlySalaryGetPayload<T> | null>>

    /**
     * Find zero or more MonthlySalaries that matches the filter.
     * @param {FindManyMonthlySalaryArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MonthlySalaries
     * const monthlySalaries = await prisma.monthlySalary.findMany()
     * 
     * // Get first 10 MonthlySalaries
     * const monthlySalaries = await prisma.monthlySalary.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const monthlySalaryWithIdOnly = await prisma.monthlySalary.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyMonthlySalaryArgs>(
      args?: Subset<T, FindManyMonthlySalaryArgs>
    ): CheckSelect<T, Promise<Array<MonthlySalary>>, Promise<Array<MonthlySalaryGetPayload<T>>>>

    /**
     * Create a MonthlySalary.
     * @param {MonthlySalaryCreateArgs} args - Arguments to create a MonthlySalary.
     * @example
     * // Create one MonthlySalary
     * const MonthlySalary = await prisma.monthlySalary.create({
     *   data: {
     *     // ... data to create a MonthlySalary
     *   }
     * })
     * 
    **/
    create<T extends MonthlySalaryCreateArgs>(
      args: Subset<T, MonthlySalaryCreateArgs>
    ): CheckSelect<T, Prisma__MonthlySalaryClient<MonthlySalary>, Prisma__MonthlySalaryClient<MonthlySalaryGetPayload<T>>>

    /**
     * Delete a MonthlySalary.
     * @param {MonthlySalaryDeleteArgs} args - Arguments to delete one MonthlySalary.
     * @example
     * // Delete one MonthlySalary
     * const MonthlySalary = await prisma.monthlySalary.delete({
     *   where: {
     *     // ... filter to delete one MonthlySalary
     *   }
     * })
     * 
    **/
    delete<T extends MonthlySalaryDeleteArgs>(
      args: Subset<T, MonthlySalaryDeleteArgs>
    ): CheckSelect<T, Prisma__MonthlySalaryClient<MonthlySalary>, Prisma__MonthlySalaryClient<MonthlySalaryGetPayload<T>>>

    /**
     * Update one MonthlySalary.
     * @param {MonthlySalaryUpdateArgs} args - Arguments to update one MonthlySalary.
     * @example
     * // Update one MonthlySalary
     * const monthlySalary = await prisma.monthlySalary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MonthlySalaryUpdateArgs>(
      args: Subset<T, MonthlySalaryUpdateArgs>
    ): CheckSelect<T, Prisma__MonthlySalaryClient<MonthlySalary>, Prisma__MonthlySalaryClient<MonthlySalaryGetPayload<T>>>

    /**
     * Delete zero or more MonthlySalaries.
     * @param {MonthlySalaryDeleteManyArgs} args - Arguments to filter MonthlySalaries to delete.
     * @example
     * // Delete a few MonthlySalaries
     * const { count } = await prisma.monthlySalary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MonthlySalaryDeleteManyArgs>(
      args?: Subset<T, MonthlySalaryDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more MonthlySalaries.
     * @param {MonthlySalaryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MonthlySalaries
     * const monthlySalary = await prisma.monthlySalary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MonthlySalaryUpdateManyArgs>(
      args: Subset<T, MonthlySalaryUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one MonthlySalary.
     * @param {MonthlySalaryUpsertArgs} args - Arguments to update or create a MonthlySalary.
     * @example
     * // Update or create a MonthlySalary
     * const monthlySalary = await prisma.monthlySalary.upsert({
     *   create: {
     *     // ... data to create a MonthlySalary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MonthlySalary we want to update
     *   }
     * })
    **/
    upsert<T extends MonthlySalaryUpsertArgs>(
      args: Subset<T, MonthlySalaryUpsertArgs>
    ): CheckSelect<T, Prisma__MonthlySalaryClient<MonthlySalary>, Prisma__MonthlySalaryClient<MonthlySalaryGetPayload<T>>>

    /**
     * Find zero or one MonthlySalary that matches the filter.
     * @param {FindUniqueMonthlySalaryArgs} args - Arguments to find a MonthlySalary
     * @deprecated This will be deprecated please use prisma.monthlySalary.findUnique
     * @example
     * // Get one MonthlySalary
     * const monthlySalary = await prisma.monthlySalary.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueMonthlySalaryArgs>(
      args: Subset<T, FindUniqueMonthlySalaryArgs>
    ): CheckSelect<T, Prisma__MonthlySalaryClient<MonthlySalary | null>, Prisma__MonthlySalaryClient<MonthlySalaryGetPayload<T> | null>>

    /**
     * Count the number of MonthlySalaries.
     * @param {FindManyMonthlySalaryArgs} args - Arguments to filter MonthlySalaries to count.
     * @example
     * // Count the number of MonthlySalaries
     * const count = await prisma.monthlySalary.count({
     *   where: {
     *     // ... the filter for the MonthlySalaries we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyMonthlySalaryArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a MonthlySalary.
     * @param {AggregateMonthlySalaryArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateMonthlySalaryArgs>(args: Subset<T, AggregateMonthlySalaryArgs>): Promise<GetMonthlySalaryAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for MonthlySalary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MonthlySalaryClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    employeeTable<T extends EmployeeArgs = {}>(args?: Subset<T, EmployeeArgs>): CheckSelect<T, Prisma__EmployeeClient<Employee | null>, Prisma__EmployeeClient<EmployeeGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * MonthlySalary findUnique
   */
  export type FindUniqueMonthlySalaryArgs = {
    /**
     * Select specific fields to fetch from the MonthlySalary
    **/
    select?: MonthlySalarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MonthlySalaryInclude | null
    /**
     * Filter, which MonthlySalary to fetch.
    **/
    where: MonthlySalaryWhereUniqueInput
  }


  /**
   * MonthlySalary findFirst
   */
  export type FindFirstMonthlySalaryArgs = {
    /**
     * Select specific fields to fetch from the MonthlySalary
    **/
    select?: MonthlySalarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MonthlySalaryInclude | null
    /**
     * Filter, which MonthlySalary to fetch.
    **/
    where?: MonthlySalaryWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of MonthlySalaries to fetch.
    **/
    orderBy?: Enumerable<MonthlySalaryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MonthlySalaries.
    **/
    cursor?: MonthlySalaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonthlySalaries from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonthlySalaries.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of MonthlySalaries.
    **/
    distinct?: Enumerable<MonthlySalaryScalarFieldEnum>
  }


  /**
   * MonthlySalary findMany
   */
  export type FindManyMonthlySalaryArgs = {
    /**
     * Select specific fields to fetch from the MonthlySalary
    **/
    select?: MonthlySalarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MonthlySalaryInclude | null
    /**
     * Filter, which MonthlySalaries to fetch.
    **/
    where?: MonthlySalaryWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of MonthlySalaries to fetch.
    **/
    orderBy?: Enumerable<MonthlySalaryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MonthlySalaries.
    **/
    cursor?: MonthlySalaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonthlySalaries from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonthlySalaries.
    **/
    skip?: number
    distinct?: Enumerable<MonthlySalaryScalarFieldEnum>
  }


  /**
   * MonthlySalary create
   */
  export type MonthlySalaryCreateArgs = {
    /**
     * Select specific fields to fetch from the MonthlySalary
    **/
    select?: MonthlySalarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MonthlySalaryInclude | null
    /**
     * The data needed to create a MonthlySalary.
    **/
    data: MonthlySalaryCreateInput
  }


  /**
   * MonthlySalary update
   */
  export type MonthlySalaryUpdateArgs = {
    /**
     * Select specific fields to fetch from the MonthlySalary
    **/
    select?: MonthlySalarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MonthlySalaryInclude | null
    /**
     * The data needed to update a MonthlySalary.
    **/
    data: MonthlySalaryUpdateInput
    /**
     * Choose, which MonthlySalary to update.
    **/
    where: MonthlySalaryWhereUniqueInput
  }


  /**
   * MonthlySalary updateMany
   */
  export type MonthlySalaryUpdateManyArgs = {
    data: MonthlySalaryUpdateManyMutationInput
    where?: MonthlySalaryWhereInput
  }


  /**
   * MonthlySalary upsert
   */
  export type MonthlySalaryUpsertArgs = {
    /**
     * Select specific fields to fetch from the MonthlySalary
    **/
    select?: MonthlySalarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MonthlySalaryInclude | null
    /**
     * The filter to search for the MonthlySalary to update in case it exists.
    **/
    where: MonthlySalaryWhereUniqueInput
    /**
     * In case the MonthlySalary found by the `where` argument doesn't exist, create a new MonthlySalary with this data.
    **/
    create: MonthlySalaryCreateInput
    /**
     * In case the MonthlySalary was found with the provided `where` argument, update it with this data.
    **/
    update: MonthlySalaryUpdateInput
  }


  /**
   * MonthlySalary delete
   */
  export type MonthlySalaryDeleteArgs = {
    /**
     * Select specific fields to fetch from the MonthlySalary
    **/
    select?: MonthlySalarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MonthlySalaryInclude | null
    /**
     * Filter which MonthlySalary to delete.
    **/
    where: MonthlySalaryWhereUniqueInput
  }


  /**
   * MonthlySalary deleteMany
   */
  export type MonthlySalaryDeleteManyArgs = {
    where?: MonthlySalaryWhereInput
  }


  /**
   * MonthlySalary without action
   */
  export type MonthlySalaryArgs = {
    /**
     * Select specific fields to fetch from the MonthlySalary
    **/
    select?: MonthlySalarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MonthlySalaryInclude | null
  }



  /**
   * Model Paid
   */


  export type AggregatePaid = {
    count: number | null
    avg: PaidAvgAggregateOutputType | null
    sum: PaidSumAggregateOutputType | null
    min: PaidMinAggregateOutputType | null
    max: PaidMaxAggregateOutputType | null
  }

  export type PaidAvgAggregateOutputType = {
    id: number
    payout: number
    e_id: number
  }

  export type PaidSumAggregateOutputType = {
    id: number
    payout: number
    e_id: number
  }

  export type PaidMinAggregateOutputType = {
    id: number
    paidmonth: string | null
    payout: number
    e_id: number
  }

  export type PaidMaxAggregateOutputType = {
    id: number
    paidmonth: string | null
    payout: number
    e_id: number
  }

  export type PaidCountAggregateOutputType = {
    id: number
    paidmonth: number | null
    payout: number
    e_id: number
    _all: number
  }


  export type PaidAvgAggregateInputType = {
    id?: true
    payout?: true
    e_id?: true
  }

  export type PaidSumAggregateInputType = {
    id?: true
    payout?: true
    e_id?: true
  }

  export type PaidMinAggregateInputType = {
    id?: true
    paidmonth?: true
    payout?: true
    e_id?: true
  }

  export type PaidMaxAggregateInputType = {
    id?: true
    paidmonth?: true
    payout?: true
    e_id?: true
  }

  export type PaidCountAggregateInputType = {
    id?: true
    paidmonth?: true
    payout?: true
    e_id?: true
    _all?: true
  }

  export type AggregatePaidArgs = {
    /**
     * Filter which Paid to aggregate.
    **/
    where?: PaidWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Paids to fetch.
    **/
    orderBy?: Enumerable<PaidOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: PaidWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paids from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paids.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Paids
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: PaidAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: PaidSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: PaidMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: PaidMaxAggregateInputType
  }

  export type GetPaidAggregateType<T extends AggregatePaidArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetPaidAggregateScalarType<T[P]>
  }

  export type GetPaidAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof PaidAvgAggregateOutputType ? PaidAvgAggregateOutputType[P] : never
  }

    



  export type PaidSelect = {
    id?: boolean
    paidmonth?: boolean
    payout?: boolean
    employeeTable?: boolean | EmployeeArgs
    e_id?: boolean
  }

  export type PaidInclude = {
    employeeTable?: boolean | EmployeeArgs
  }

  export type PaidGetPayload<
    S extends boolean | null | undefined | PaidArgs,
    U = keyof S
      > = S extends true
        ? Paid
    : S extends undefined
    ? never
    : S extends PaidArgs | FindManyPaidArgs
    ?'include' extends U
    ? Paid  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'employeeTable'
        ? EmployeeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Paid ?Paid [P]
  : 
          P extends 'employeeTable'
        ? EmployeeGetPayload<S['select'][P]> : never
  } 
    : Paid
  : Paid


  export interface PaidDelegate {
    /**
     * Find zero or one Paid that matches the filter.
     * @param {FindUniquePaidArgs} args - Arguments to find a Paid
     * @example
     * // Get one Paid
     * const paid = await prisma.paid.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquePaidArgs>(
      args: Subset<T, FindUniquePaidArgs>
    ): CheckSelect<T, Prisma__PaidClient<Paid | null>, Prisma__PaidClient<PaidGetPayload<T> | null>>

    /**
     * Find the first Paid that matches the filter.
     * @param {FindFirstPaidArgs} args - Arguments to find a Paid
     * @example
     * // Get one Paid
     * const paid = await prisma.paid.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstPaidArgs>(
      args?: Subset<T, FindFirstPaidArgs>
    ): CheckSelect<T, Prisma__PaidClient<Paid | null>, Prisma__PaidClient<PaidGetPayload<T> | null>>

    /**
     * Find zero or more Paids that matches the filter.
     * @param {FindManyPaidArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Paids
     * const paids = await prisma.paid.findMany()
     * 
     * // Get first 10 Paids
     * const paids = await prisma.paid.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paidWithIdOnly = await prisma.paid.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyPaidArgs>(
      args?: Subset<T, FindManyPaidArgs>
    ): CheckSelect<T, Promise<Array<Paid>>, Promise<Array<PaidGetPayload<T>>>>

    /**
     * Create a Paid.
     * @param {PaidCreateArgs} args - Arguments to create a Paid.
     * @example
     * // Create one Paid
     * const Paid = await prisma.paid.create({
     *   data: {
     *     // ... data to create a Paid
     *   }
     * })
     * 
    **/
    create<T extends PaidCreateArgs>(
      args: Subset<T, PaidCreateArgs>
    ): CheckSelect<T, Prisma__PaidClient<Paid>, Prisma__PaidClient<PaidGetPayload<T>>>

    /**
     * Delete a Paid.
     * @param {PaidDeleteArgs} args - Arguments to delete one Paid.
     * @example
     * // Delete one Paid
     * const Paid = await prisma.paid.delete({
     *   where: {
     *     // ... filter to delete one Paid
     *   }
     * })
     * 
    **/
    delete<T extends PaidDeleteArgs>(
      args: Subset<T, PaidDeleteArgs>
    ): CheckSelect<T, Prisma__PaidClient<Paid>, Prisma__PaidClient<PaidGetPayload<T>>>

    /**
     * Update one Paid.
     * @param {PaidUpdateArgs} args - Arguments to update one Paid.
     * @example
     * // Update one Paid
     * const paid = await prisma.paid.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PaidUpdateArgs>(
      args: Subset<T, PaidUpdateArgs>
    ): CheckSelect<T, Prisma__PaidClient<Paid>, Prisma__PaidClient<PaidGetPayload<T>>>

    /**
     * Delete zero or more Paids.
     * @param {PaidDeleteManyArgs} args - Arguments to filter Paids to delete.
     * @example
     * // Delete a few Paids
     * const { count } = await prisma.paid.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PaidDeleteManyArgs>(
      args?: Subset<T, PaidDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Paids.
     * @param {PaidUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Paids
     * const paid = await prisma.paid.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PaidUpdateManyArgs>(
      args: Subset<T, PaidUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Paid.
     * @param {PaidUpsertArgs} args - Arguments to update or create a Paid.
     * @example
     * // Update or create a Paid
     * const paid = await prisma.paid.upsert({
     *   create: {
     *     // ... data to create a Paid
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Paid we want to update
     *   }
     * })
    **/
    upsert<T extends PaidUpsertArgs>(
      args: Subset<T, PaidUpsertArgs>
    ): CheckSelect<T, Prisma__PaidClient<Paid>, Prisma__PaidClient<PaidGetPayload<T>>>

    /**
     * Find zero or one Paid that matches the filter.
     * @param {FindUniquePaidArgs} args - Arguments to find a Paid
     * @deprecated This will be deprecated please use prisma.paid.findUnique
     * @example
     * // Get one Paid
     * const paid = await prisma.paid.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquePaidArgs>(
      args: Subset<T, FindUniquePaidArgs>
    ): CheckSelect<T, Prisma__PaidClient<Paid | null>, Prisma__PaidClient<PaidGetPayload<T> | null>>

    /**
     * Count the number of Paids.
     * @param {FindManyPaidArgs} args - Arguments to filter Paids to count.
     * @example
     * // Count the number of Paids
     * const count = await prisma.paid.count({
     *   where: {
     *     // ... the filter for the Paids we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyPaidArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Paid.
     * @param {AggregatePaidArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregatePaidArgs>(args: Subset<T, AggregatePaidArgs>): Promise<GetPaidAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Paid.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PaidClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    employeeTable<T extends EmployeeArgs = {}>(args?: Subset<T, EmployeeArgs>): CheckSelect<T, Prisma__EmployeeClient<Employee | null>, Prisma__EmployeeClient<EmployeeGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Paid findUnique
   */
  export type FindUniquePaidArgs = {
    /**
     * Select specific fields to fetch from the Paid
    **/
    select?: PaidSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PaidInclude | null
    /**
     * Filter, which Paid to fetch.
    **/
    where: PaidWhereUniqueInput
  }


  /**
   * Paid findFirst
   */
  export type FindFirstPaidArgs = {
    /**
     * Select specific fields to fetch from the Paid
    **/
    select?: PaidSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PaidInclude | null
    /**
     * Filter, which Paid to fetch.
    **/
    where?: PaidWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Paids to fetch.
    **/
    orderBy?: Enumerable<PaidOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paids.
    **/
    cursor?: PaidWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paids from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paids.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Paids.
    **/
    distinct?: Enumerable<PaidScalarFieldEnum>
  }


  /**
   * Paid findMany
   */
  export type FindManyPaidArgs = {
    /**
     * Select specific fields to fetch from the Paid
    **/
    select?: PaidSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PaidInclude | null
    /**
     * Filter, which Paids to fetch.
    **/
    where?: PaidWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Paids to fetch.
    **/
    orderBy?: Enumerable<PaidOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Paids.
    **/
    cursor?: PaidWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paids from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paids.
    **/
    skip?: number
    distinct?: Enumerable<PaidScalarFieldEnum>
  }


  /**
   * Paid create
   */
  export type PaidCreateArgs = {
    /**
     * Select specific fields to fetch from the Paid
    **/
    select?: PaidSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PaidInclude | null
    /**
     * The data needed to create a Paid.
    **/
    data: PaidCreateInput
  }


  /**
   * Paid update
   */
  export type PaidUpdateArgs = {
    /**
     * Select specific fields to fetch from the Paid
    **/
    select?: PaidSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PaidInclude | null
    /**
     * The data needed to update a Paid.
    **/
    data: PaidUpdateInput
    /**
     * Choose, which Paid to update.
    **/
    where: PaidWhereUniqueInput
  }


  /**
   * Paid updateMany
   */
  export type PaidUpdateManyArgs = {
    data: PaidUpdateManyMutationInput
    where?: PaidWhereInput
  }


  /**
   * Paid upsert
   */
  export type PaidUpsertArgs = {
    /**
     * Select specific fields to fetch from the Paid
    **/
    select?: PaidSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PaidInclude | null
    /**
     * The filter to search for the Paid to update in case it exists.
    **/
    where: PaidWhereUniqueInput
    /**
     * In case the Paid found by the `where` argument doesn't exist, create a new Paid with this data.
    **/
    create: PaidCreateInput
    /**
     * In case the Paid was found with the provided `where` argument, update it with this data.
    **/
    update: PaidUpdateInput
  }


  /**
   * Paid delete
   */
  export type PaidDeleteArgs = {
    /**
     * Select specific fields to fetch from the Paid
    **/
    select?: PaidSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PaidInclude | null
    /**
     * Filter which Paid to delete.
    **/
    where: PaidWhereUniqueInput
  }


  /**
   * Paid deleteMany
   */
  export type PaidDeleteManyArgs = {
    where?: PaidWhereInput
  }


  /**
   * Paid without action
   */
  export type PaidArgs = {
    /**
     * Select specific fields to fetch from the Paid
    **/
    select?: PaidSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PaidInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const EmployeeScalarFieldEnum: {
    id: 'id',
    employeename: 'employeename',
    address: 'address',
    agreesalary: 'agreesalary'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const MonthlySalaryScalarFieldEnum: {
    id: 'id',
    actualsalary: 'actualsalary',
    e_Id: 'e_Id'
  };

  export type MonthlySalaryScalarFieldEnum = (typeof MonthlySalaryScalarFieldEnum)[keyof typeof MonthlySalaryScalarFieldEnum]


  export const PaidScalarFieldEnum: {
    id: 'id',
    paidmonth: 'paidmonth',
    payout: 'payout',
    e_id: 'e_id'
  };

  export type PaidScalarFieldEnum = (typeof PaidScalarFieldEnum)[keyof typeof PaidScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type EmployeeWhereInput = {
    AND?: Enumerable<EmployeeWhereInput>
    OR?: Enumerable<EmployeeWhereInput>
    NOT?: Enumerable<EmployeeWhereInput>
    id?: IntFilter | number
    employeename?: StringFilter | string
    address?: StringFilter | string
    agreesalary?: FloatFilter | number
    MonthlySalary?: XOR<MonthlySalaryWhereInput, MonthlySalaryRelationFilter> | null
    Paid?: XOR<PaidWhereInput, PaidRelationFilter> | null
  }

  export type EmployeeOrderByInput = {
    id?: SortOrder
    employeename?: SortOrder
    address?: SortOrder
    agreesalary?: SortOrder
  }

  export type EmployeeWhereUniqueInput = {
    id?: number
  }

  export type MonthlySalaryWhereInput = {
    AND?: Enumerable<MonthlySalaryWhereInput>
    OR?: Enumerable<MonthlySalaryWhereInput>
    NOT?: Enumerable<MonthlySalaryWhereInput>
    id?: IntFilter | number
    actualsalary?: FloatFilter | number
    employeeTable?: XOR<EmployeeWhereInput, EmployeeRelationFilter>
    e_Id?: IntFilter | number
  }

  export type MonthlySalaryOrderByInput = {
    id?: SortOrder
    actualsalary?: SortOrder
    e_Id?: SortOrder
  }

  export type MonthlySalaryWhereUniqueInput = {
    id?: number
    e_Id?: number
  }

  export type PaidWhereInput = {
    AND?: Enumerable<PaidWhereInput>
    OR?: Enumerable<PaidWhereInput>
    NOT?: Enumerable<PaidWhereInput>
    id?: IntFilter | number
    paidmonth?: StringFilter | string
    payout?: FloatFilter | number
    employeeTable?: XOR<EmployeeWhereInput, EmployeeRelationFilter>
    e_id?: IntFilter | number
  }

  export type PaidOrderByInput = {
    id?: SortOrder
    paidmonth?: SortOrder
    payout?: SortOrder
    e_id?: SortOrder
  }

  export type PaidWhereUniqueInput = {
    id?: number
    e_id?: number
  }

  export type EmployeeCreateInput = {
    employeename: string
    address: string
    agreesalary: number
    MonthlySalary?: MonthlySalaryCreateOneWithoutEmployeeTableInput
    Paid?: PaidCreateOneWithoutEmployeeTableInput
  }

  export type EmployeeUpdateInput = {
    employeename?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    agreesalary?: FloatFieldUpdateOperationsInput | number
    MonthlySalary?: MonthlySalaryUpdateOneWithoutEmployeeTableInput
    Paid?: PaidUpdateOneWithoutEmployeeTableInput
  }

  export type EmployeeUpdateManyMutationInput = {
    employeename?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    agreesalary?: FloatFieldUpdateOperationsInput | number
  }

  export type MonthlySalaryCreateInput = {
    actualsalary: number
    employeeTable: EmployeeCreateOneWithoutMonthlySalaryInput
  }

  export type MonthlySalaryUpdateInput = {
    actualsalary?: FloatFieldUpdateOperationsInput | number
    employeeTable?: EmployeeUpdateOneRequiredWithoutMonthlySalaryInput
  }

  export type MonthlySalaryUpdateManyMutationInput = {
    actualsalary?: FloatFieldUpdateOperationsInput | number
  }

  export type PaidCreateInput = {
    paidmonth: string
    payout: number
    employeeTable: EmployeeCreateOneWithoutPaidInput
  }

  export type PaidUpdateInput = {
    paidmonth?: StringFieldUpdateOperationsInput | string
    payout?: FloatFieldUpdateOperationsInput | number
    employeeTable?: EmployeeUpdateOneRequiredWithoutPaidInput
  }

  export type PaidUpdateManyMutationInput = {
    paidmonth?: StringFieldUpdateOperationsInput | string
    payout?: FloatFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type MonthlySalaryRelationFilter = {
    is?: MonthlySalaryWhereInput | null
    isNot?: MonthlySalaryWhereInput | null
  }

  export type PaidRelationFilter = {
    is?: PaidWhereInput | null
    isNot?: PaidWhereInput | null
  }

  export type EmployeeRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type MonthlySalaryCreateOneWithoutEmployeeTableInput = {
    create?: MonthlySalaryCreateWithoutEmployeeTableInput
    connect?: MonthlySalaryWhereUniqueInput
    connectOrCreate?: MonthlySalaryCreateOrConnectWithoutemployeeTableInput
  }

  export type PaidCreateOneWithoutEmployeeTableInput = {
    create?: PaidCreateWithoutEmployeeTableInput
    connect?: PaidWhereUniqueInput
    connectOrCreate?: PaidCreateOrConnectWithoutemployeeTableInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MonthlySalaryUpdateOneWithoutEmployeeTableInput = {
    create?: MonthlySalaryCreateWithoutEmployeeTableInput
    connect?: MonthlySalaryWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: MonthlySalaryUpdateWithoutEmployeeTableInput
    upsert?: MonthlySalaryUpsertWithoutEmployeeTableInput
    connectOrCreate?: MonthlySalaryCreateOrConnectWithoutemployeeTableInput
  }

  export type PaidUpdateOneWithoutEmployeeTableInput = {
    create?: PaidCreateWithoutEmployeeTableInput
    connect?: PaidWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: PaidUpdateWithoutEmployeeTableInput
    upsert?: PaidUpsertWithoutEmployeeTableInput
    connectOrCreate?: PaidCreateOrConnectWithoutemployeeTableInput
  }

  export type EmployeeCreateOneWithoutMonthlySalaryInput = {
    create?: EmployeeCreateWithoutMonthlySalaryInput
    connect?: EmployeeWhereUniqueInput
    connectOrCreate?: EmployeeCreateOrConnectWithoutMonthlySalaryInput
  }

  export type EmployeeUpdateOneRequiredWithoutMonthlySalaryInput = {
    create?: EmployeeCreateWithoutMonthlySalaryInput
    connect?: EmployeeWhereUniqueInput
    update?: EmployeeUpdateWithoutMonthlySalaryInput
    upsert?: EmployeeUpsertWithoutMonthlySalaryInput
    connectOrCreate?: EmployeeCreateOrConnectWithoutMonthlySalaryInput
  }

  export type EmployeeCreateOneWithoutPaidInput = {
    create?: EmployeeCreateWithoutPaidInput
    connect?: EmployeeWhereUniqueInput
    connectOrCreate?: EmployeeCreateOrConnectWithoutPaidInput
  }

  export type EmployeeUpdateOneRequiredWithoutPaidInput = {
    create?: EmployeeCreateWithoutPaidInput
    connect?: EmployeeWhereUniqueInput
    update?: EmployeeUpdateWithoutPaidInput
    upsert?: EmployeeUpsertWithoutPaidInput
    connectOrCreate?: EmployeeCreateOrConnectWithoutPaidInput
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type MonthlySalaryCreateWithoutEmployeeTableInput = {
    actualsalary: number
  }

  export type MonthlySalaryCreateOrConnectWithoutemployeeTableInput = {
    where: MonthlySalaryWhereUniqueInput
    create: MonthlySalaryCreateWithoutEmployeeTableInput
  }

  export type PaidCreateWithoutEmployeeTableInput = {
    paidmonth: string
    payout: number
  }

  export type PaidCreateOrConnectWithoutemployeeTableInput = {
    where: PaidWhereUniqueInput
    create: PaidCreateWithoutEmployeeTableInput
  }

  export type MonthlySalaryUpdateWithoutEmployeeTableInput = {
    actualsalary?: FloatFieldUpdateOperationsInput | number
  }

  export type MonthlySalaryUpsertWithoutEmployeeTableInput = {
    update: MonthlySalaryUpdateWithoutEmployeeTableInput
    create: MonthlySalaryCreateWithoutEmployeeTableInput
  }

  export type PaidUpdateWithoutEmployeeTableInput = {
    paidmonth?: StringFieldUpdateOperationsInput | string
    payout?: FloatFieldUpdateOperationsInput | number
  }

  export type PaidUpsertWithoutEmployeeTableInput = {
    update: PaidUpdateWithoutEmployeeTableInput
    create: PaidCreateWithoutEmployeeTableInput
  }

  export type EmployeeCreateWithoutMonthlySalaryInput = {
    employeename: string
    address: string
    agreesalary: number
    Paid?: PaidCreateOneWithoutEmployeeTableInput
  }

  export type EmployeeCreateOrConnectWithoutMonthlySalaryInput = {
    where: EmployeeWhereUniqueInput
    create: EmployeeCreateWithoutMonthlySalaryInput
  }

  export type EmployeeUpdateWithoutMonthlySalaryInput = {
    employeename?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    agreesalary?: FloatFieldUpdateOperationsInput | number
    Paid?: PaidUpdateOneWithoutEmployeeTableInput
  }

  export type EmployeeUpsertWithoutMonthlySalaryInput = {
    update: EmployeeUpdateWithoutMonthlySalaryInput
    create: EmployeeCreateWithoutMonthlySalaryInput
  }

  export type EmployeeCreateWithoutPaidInput = {
    employeename: string
    address: string
    agreesalary: number
    MonthlySalary?: MonthlySalaryCreateOneWithoutEmployeeTableInput
  }

  export type EmployeeCreateOrConnectWithoutPaidInput = {
    where: EmployeeWhereUniqueInput
    create: EmployeeCreateWithoutPaidInput
  }

  export type EmployeeUpdateWithoutPaidInput = {
    employeename?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    agreesalary?: FloatFieldUpdateOperationsInput | number
    MonthlySalary?: MonthlySalaryUpdateOneWithoutEmployeeTableInput
  }

  export type EmployeeUpsertWithoutPaidInput = {
    update: EmployeeUpdateWithoutPaidInput
    create: EmployeeCreateWithoutPaidInput
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatibility introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to `Prisma.EmployeeScalarFieldEnum`
 */
export type EmployeeScalarFieldEnum = Prisma.EmployeeScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryScalarFieldEnum`
 */
export type MonthlySalaryScalarFieldEnum = Prisma.MonthlySalaryScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.PaidScalarFieldEnum`
 */
export type PaidScalarFieldEnum = Prisma.PaidScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SortOrder`
 */
export type SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to `Prisma.ModelName`
 */
export type ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to `Prisma.AggregateEmployee`
 */
export type AggregateEmployee = Prisma.AggregateEmployee

/**
 * @deprecated Renamed to `Prisma.EmployeeAvgAggregateOutputType`
 */
export type EmployeeAvgAggregateOutputType = Prisma.EmployeeAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.EmployeeSumAggregateOutputType`
 */
export type EmployeeSumAggregateOutputType = Prisma.EmployeeSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.EmployeeMinAggregateOutputType`
 */
export type EmployeeMinAggregateOutputType = Prisma.EmployeeMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.EmployeeMaxAggregateOutputType`
 */
export type EmployeeMaxAggregateOutputType = Prisma.EmployeeMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.EmployeeCountAggregateOutputType`
 */
export type EmployeeCountAggregateOutputType = Prisma.EmployeeCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateEmployeeArgs`
 */
export type AggregateEmployeeArgs = Prisma.AggregateEmployeeArgs

/**
 * @deprecated Renamed to `Prisma.EmployeeAvgAggregateInputType`
 */
export type EmployeeAvgAggregateInputType = Prisma.EmployeeAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.EmployeeSumAggregateInputType`
 */
export type EmployeeSumAggregateInputType = Prisma.EmployeeSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.EmployeeMinAggregateInputType`
 */
export type EmployeeMinAggregateInputType = Prisma.EmployeeMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.EmployeeMaxAggregateInputType`
 */
export type EmployeeMaxAggregateInputType = Prisma.EmployeeMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.EmployeeCountAggregateInputType`
 */
export type EmployeeCountAggregateInputType = Prisma.EmployeeCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.EmployeeSelect`
 */
export type EmployeeSelect = Prisma.EmployeeSelect

/**
 * @deprecated Renamed to `Prisma.EmployeeInclude`
 */
export type EmployeeInclude = Prisma.EmployeeInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueEmployeeArgs`
 */
export type FindUniqueEmployeeArgs = Prisma.FindUniqueEmployeeArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstEmployeeArgs`
 */
export type FindFirstEmployeeArgs = Prisma.FindFirstEmployeeArgs

/**
 * @deprecated Renamed to `Prisma.FindManyEmployeeArgs`
 */
export type FindManyEmployeeArgs = Prisma.FindManyEmployeeArgs

/**
 * @deprecated Renamed to `Prisma.EmployeeCreateArgs`
 */
export type EmployeeCreateArgs = Prisma.EmployeeCreateArgs

/**
 * @deprecated Renamed to `Prisma.EmployeeUpdateArgs`
 */
export type EmployeeUpdateArgs = Prisma.EmployeeUpdateArgs

/**
 * @deprecated Renamed to `Prisma.EmployeeUpdateManyArgs`
 */
export type EmployeeUpdateManyArgs = Prisma.EmployeeUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.EmployeeUpsertArgs`
 */
export type EmployeeUpsertArgs = Prisma.EmployeeUpsertArgs

/**
 * @deprecated Renamed to `Prisma.EmployeeDeleteArgs`
 */
export type EmployeeDeleteArgs = Prisma.EmployeeDeleteArgs

/**
 * @deprecated Renamed to `Prisma.EmployeeDeleteManyArgs`
 */
export type EmployeeDeleteManyArgs = Prisma.EmployeeDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateMonthlySalary`
 */
export type AggregateMonthlySalary = Prisma.AggregateMonthlySalary

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryAvgAggregateOutputType`
 */
export type MonthlySalaryAvgAggregateOutputType = Prisma.MonthlySalaryAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.MonthlySalarySumAggregateOutputType`
 */
export type MonthlySalarySumAggregateOutputType = Prisma.MonthlySalarySumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryMinAggregateOutputType`
 */
export type MonthlySalaryMinAggregateOutputType = Prisma.MonthlySalaryMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryMaxAggregateOutputType`
 */
export type MonthlySalaryMaxAggregateOutputType = Prisma.MonthlySalaryMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryCountAggregateOutputType`
 */
export type MonthlySalaryCountAggregateOutputType = Prisma.MonthlySalaryCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateMonthlySalaryArgs`
 */
export type AggregateMonthlySalaryArgs = Prisma.AggregateMonthlySalaryArgs

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryAvgAggregateInputType`
 */
export type MonthlySalaryAvgAggregateInputType = Prisma.MonthlySalaryAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.MonthlySalarySumAggregateInputType`
 */
export type MonthlySalarySumAggregateInputType = Prisma.MonthlySalarySumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryMinAggregateInputType`
 */
export type MonthlySalaryMinAggregateInputType = Prisma.MonthlySalaryMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryMaxAggregateInputType`
 */
export type MonthlySalaryMaxAggregateInputType = Prisma.MonthlySalaryMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryCountAggregateInputType`
 */
export type MonthlySalaryCountAggregateInputType = Prisma.MonthlySalaryCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.MonthlySalarySelect`
 */
export type MonthlySalarySelect = Prisma.MonthlySalarySelect

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryInclude`
 */
export type MonthlySalaryInclude = Prisma.MonthlySalaryInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueMonthlySalaryArgs`
 */
export type FindUniqueMonthlySalaryArgs = Prisma.FindUniqueMonthlySalaryArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstMonthlySalaryArgs`
 */
export type FindFirstMonthlySalaryArgs = Prisma.FindFirstMonthlySalaryArgs

/**
 * @deprecated Renamed to `Prisma.FindManyMonthlySalaryArgs`
 */
export type FindManyMonthlySalaryArgs = Prisma.FindManyMonthlySalaryArgs

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryCreateArgs`
 */
export type MonthlySalaryCreateArgs = Prisma.MonthlySalaryCreateArgs

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryUpdateArgs`
 */
export type MonthlySalaryUpdateArgs = Prisma.MonthlySalaryUpdateArgs

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryUpdateManyArgs`
 */
export type MonthlySalaryUpdateManyArgs = Prisma.MonthlySalaryUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryUpsertArgs`
 */
export type MonthlySalaryUpsertArgs = Prisma.MonthlySalaryUpsertArgs

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryDeleteArgs`
 */
export type MonthlySalaryDeleteArgs = Prisma.MonthlySalaryDeleteArgs

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryDeleteManyArgs`
 */
export type MonthlySalaryDeleteManyArgs = Prisma.MonthlySalaryDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregatePaid`
 */
export type AggregatePaid = Prisma.AggregatePaid

/**
 * @deprecated Renamed to `Prisma.PaidAvgAggregateOutputType`
 */
export type PaidAvgAggregateOutputType = Prisma.PaidAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PaidSumAggregateOutputType`
 */
export type PaidSumAggregateOutputType = Prisma.PaidSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PaidMinAggregateOutputType`
 */
export type PaidMinAggregateOutputType = Prisma.PaidMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PaidMaxAggregateOutputType`
 */
export type PaidMaxAggregateOutputType = Prisma.PaidMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PaidCountAggregateOutputType`
 */
export type PaidCountAggregateOutputType = Prisma.PaidCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregatePaidArgs`
 */
export type AggregatePaidArgs = Prisma.AggregatePaidArgs

/**
 * @deprecated Renamed to `Prisma.PaidAvgAggregateInputType`
 */
export type PaidAvgAggregateInputType = Prisma.PaidAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PaidSumAggregateInputType`
 */
export type PaidSumAggregateInputType = Prisma.PaidSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PaidMinAggregateInputType`
 */
export type PaidMinAggregateInputType = Prisma.PaidMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PaidMaxAggregateInputType`
 */
export type PaidMaxAggregateInputType = Prisma.PaidMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PaidCountAggregateInputType`
 */
export type PaidCountAggregateInputType = Prisma.PaidCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PaidSelect`
 */
export type PaidSelect = Prisma.PaidSelect

/**
 * @deprecated Renamed to `Prisma.PaidInclude`
 */
export type PaidInclude = Prisma.PaidInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquePaidArgs`
 */
export type FindUniquePaidArgs = Prisma.FindUniquePaidArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstPaidArgs`
 */
export type FindFirstPaidArgs = Prisma.FindFirstPaidArgs

/**
 * @deprecated Renamed to `Prisma.FindManyPaidArgs`
 */
export type FindManyPaidArgs = Prisma.FindManyPaidArgs

/**
 * @deprecated Renamed to `Prisma.PaidCreateArgs`
 */
export type PaidCreateArgs = Prisma.PaidCreateArgs

/**
 * @deprecated Renamed to `Prisma.PaidUpdateArgs`
 */
export type PaidUpdateArgs = Prisma.PaidUpdateArgs

/**
 * @deprecated Renamed to `Prisma.PaidUpdateManyArgs`
 */
export type PaidUpdateManyArgs = Prisma.PaidUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.PaidUpsertArgs`
 */
export type PaidUpsertArgs = Prisma.PaidUpsertArgs

/**
 * @deprecated Renamed to `Prisma.PaidDeleteArgs`
 */
export type PaidDeleteArgs = Prisma.PaidDeleteArgs

/**
 * @deprecated Renamed to `Prisma.PaidDeleteManyArgs`
 */
export type PaidDeleteManyArgs = Prisma.PaidDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.EmployeeWhereInput`
 */
export type EmployeeWhereInput = Prisma.EmployeeWhereInput

/**
 * @deprecated Renamed to `Prisma.EmployeeOrderByInput`
 */
export type EmployeeOrderByInput = Prisma.EmployeeOrderByInput

/**
 * @deprecated Renamed to `Prisma.EmployeeWhereUniqueInput`
 */
export type EmployeeWhereUniqueInput = Prisma.EmployeeWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryWhereInput`
 */
export type MonthlySalaryWhereInput = Prisma.MonthlySalaryWhereInput

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryOrderByInput`
 */
export type MonthlySalaryOrderByInput = Prisma.MonthlySalaryOrderByInput

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryWhereUniqueInput`
 */
export type MonthlySalaryWhereUniqueInput = Prisma.MonthlySalaryWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.PaidWhereInput`
 */
export type PaidWhereInput = Prisma.PaidWhereInput

/**
 * @deprecated Renamed to `Prisma.PaidOrderByInput`
 */
export type PaidOrderByInput = Prisma.PaidOrderByInput

/**
 * @deprecated Renamed to `Prisma.PaidWhereUniqueInput`
 */
export type PaidWhereUniqueInput = Prisma.PaidWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.EmployeeCreateInput`
 */
export type EmployeeCreateInput = Prisma.EmployeeCreateInput

/**
 * @deprecated Renamed to `Prisma.EmployeeUpdateInput`
 */
export type EmployeeUpdateInput = Prisma.EmployeeUpdateInput

/**
 * @deprecated Renamed to `Prisma.EmployeeUpdateManyMutationInput`
 */
export type EmployeeUpdateManyMutationInput = Prisma.EmployeeUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryCreateInput`
 */
export type MonthlySalaryCreateInput = Prisma.MonthlySalaryCreateInput

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryUpdateInput`
 */
export type MonthlySalaryUpdateInput = Prisma.MonthlySalaryUpdateInput

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryUpdateManyMutationInput`
 */
export type MonthlySalaryUpdateManyMutationInput = Prisma.MonthlySalaryUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.PaidCreateInput`
 */
export type PaidCreateInput = Prisma.PaidCreateInput

/**
 * @deprecated Renamed to `Prisma.PaidUpdateInput`
 */
export type PaidUpdateInput = Prisma.PaidUpdateInput

/**
 * @deprecated Renamed to `Prisma.PaidUpdateManyMutationInput`
 */
export type PaidUpdateManyMutationInput = Prisma.PaidUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.IntFilter`
 */
export type IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to `Prisma.StringFilter`
 */
export type StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to `Prisma.FloatFilter`
 */
export type FloatFilter = Prisma.FloatFilter

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryRelationFilter`
 */
export type MonthlySalaryRelationFilter = Prisma.MonthlySalaryRelationFilter

/**
 * @deprecated Renamed to `Prisma.PaidRelationFilter`
 */
export type PaidRelationFilter = Prisma.PaidRelationFilter

/**
 * @deprecated Renamed to `Prisma.EmployeeRelationFilter`
 */
export type EmployeeRelationFilter = Prisma.EmployeeRelationFilter

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryCreateOneWithoutEmployeeTableInput`
 */
export type MonthlySalaryCreateOneWithoutEmployeeTableInput = Prisma.MonthlySalaryCreateOneWithoutEmployeeTableInput

/**
 * @deprecated Renamed to `Prisma.PaidCreateOneWithoutEmployeeTableInput`
 */
export type PaidCreateOneWithoutEmployeeTableInput = Prisma.PaidCreateOneWithoutEmployeeTableInput

/**
 * @deprecated Renamed to `Prisma.StringFieldUpdateOperationsInput`
 */
export type StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.FloatFieldUpdateOperationsInput`
 */
export type FloatFieldUpdateOperationsInput = Prisma.FloatFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryUpdateOneWithoutEmployeeTableInput`
 */
export type MonthlySalaryUpdateOneWithoutEmployeeTableInput = Prisma.MonthlySalaryUpdateOneWithoutEmployeeTableInput

/**
 * @deprecated Renamed to `Prisma.PaidUpdateOneWithoutEmployeeTableInput`
 */
export type PaidUpdateOneWithoutEmployeeTableInput = Prisma.PaidUpdateOneWithoutEmployeeTableInput

/**
 * @deprecated Renamed to `Prisma.EmployeeCreateOneWithoutMonthlySalaryInput`
 */
export type EmployeeCreateOneWithoutMonthlySalaryInput = Prisma.EmployeeCreateOneWithoutMonthlySalaryInput

/**
 * @deprecated Renamed to `Prisma.EmployeeUpdateOneRequiredWithoutMonthlySalaryInput`
 */
export type EmployeeUpdateOneRequiredWithoutMonthlySalaryInput = Prisma.EmployeeUpdateOneRequiredWithoutMonthlySalaryInput

/**
 * @deprecated Renamed to `Prisma.EmployeeCreateOneWithoutPaidInput`
 */
export type EmployeeCreateOneWithoutPaidInput = Prisma.EmployeeCreateOneWithoutPaidInput

/**
 * @deprecated Renamed to `Prisma.EmployeeUpdateOneRequiredWithoutPaidInput`
 */
export type EmployeeUpdateOneRequiredWithoutPaidInput = Prisma.EmployeeUpdateOneRequiredWithoutPaidInput

/**
 * @deprecated Renamed to `Prisma.NestedIntFilter`
 */
export type NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringFilter`
 */
export type NestedStringFilter = Prisma.NestedStringFilter

/**
 * @deprecated Renamed to `Prisma.NestedFloatFilter`
 */
export type NestedFloatFilter = Prisma.NestedFloatFilter

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryCreateWithoutEmployeeTableInput`
 */
export type MonthlySalaryCreateWithoutEmployeeTableInput = Prisma.MonthlySalaryCreateWithoutEmployeeTableInput

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryCreateOrConnectWithoutemployeeTableInput`
 */
export type MonthlySalaryCreateOrConnectWithoutemployeeTableInput = Prisma.MonthlySalaryCreateOrConnectWithoutemployeeTableInput

/**
 * @deprecated Renamed to `Prisma.PaidCreateWithoutEmployeeTableInput`
 */
export type PaidCreateWithoutEmployeeTableInput = Prisma.PaidCreateWithoutEmployeeTableInput

/**
 * @deprecated Renamed to `Prisma.PaidCreateOrConnectWithoutemployeeTableInput`
 */
export type PaidCreateOrConnectWithoutemployeeTableInput = Prisma.PaidCreateOrConnectWithoutemployeeTableInput

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryUpdateWithoutEmployeeTableInput`
 */
export type MonthlySalaryUpdateWithoutEmployeeTableInput = Prisma.MonthlySalaryUpdateWithoutEmployeeTableInput

/**
 * @deprecated Renamed to `Prisma.MonthlySalaryUpsertWithoutEmployeeTableInput`
 */
export type MonthlySalaryUpsertWithoutEmployeeTableInput = Prisma.MonthlySalaryUpsertWithoutEmployeeTableInput

/**
 * @deprecated Renamed to `Prisma.PaidUpdateWithoutEmployeeTableInput`
 */
export type PaidUpdateWithoutEmployeeTableInput = Prisma.PaidUpdateWithoutEmployeeTableInput

/**
 * @deprecated Renamed to `Prisma.PaidUpsertWithoutEmployeeTableInput`
 */
export type PaidUpsertWithoutEmployeeTableInput = Prisma.PaidUpsertWithoutEmployeeTableInput

/**
 * @deprecated Renamed to `Prisma.EmployeeCreateWithoutMonthlySalaryInput`
 */
export type EmployeeCreateWithoutMonthlySalaryInput = Prisma.EmployeeCreateWithoutMonthlySalaryInput

/**
 * @deprecated Renamed to `Prisma.EmployeeCreateOrConnectWithoutMonthlySalaryInput`
 */
export type EmployeeCreateOrConnectWithoutMonthlySalaryInput = Prisma.EmployeeCreateOrConnectWithoutMonthlySalaryInput

/**
 * @deprecated Renamed to `Prisma.EmployeeUpdateWithoutMonthlySalaryInput`
 */
export type EmployeeUpdateWithoutMonthlySalaryInput = Prisma.EmployeeUpdateWithoutMonthlySalaryInput

/**
 * @deprecated Renamed to `Prisma.EmployeeUpsertWithoutMonthlySalaryInput`
 */
export type EmployeeUpsertWithoutMonthlySalaryInput = Prisma.EmployeeUpsertWithoutMonthlySalaryInput

/**
 * @deprecated Renamed to `Prisma.EmployeeCreateWithoutPaidInput`
 */
export type EmployeeCreateWithoutPaidInput = Prisma.EmployeeCreateWithoutPaidInput

/**
 * @deprecated Renamed to `Prisma.EmployeeCreateOrConnectWithoutPaidInput`
 */
export type EmployeeCreateOrConnectWithoutPaidInput = Prisma.EmployeeCreateOrConnectWithoutPaidInput

/**
 * @deprecated Renamed to `Prisma.EmployeeUpdateWithoutPaidInput`
 */
export type EmployeeUpdateWithoutPaidInput = Prisma.EmployeeUpdateWithoutPaidInput

/**
 * @deprecated Renamed to `Prisma.EmployeeUpsertWithoutPaidInput`
 */
export type EmployeeUpsertWithoutPaidInput = Prisma.EmployeeUpsertWithoutPaidInput